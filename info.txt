zalozyc plik script.ts -src typscriptowe
zalozyc tsconfig.json
{
    "compilerOptions": {
        "outFile": "dist.js"
    }
}

npm install -g typescript@next
tsc --watch

:-)


var svg = document.getElementById("svg");
var G = document.getElementById("g");
var path = G.getAttributeNS(null, "d").trim();
var debug = document.getElementById("debug");

function drawCircle(x, y, r, css, id) {
    var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    circle.setAttribute("class", css);
    circle.setAttribute("cx", x);
    circle.setAttribute("cy", y);
    circle.setAttribute("r", r);
    circle.setAttribute("pID", id);
    circle.setAttribute("id", id);
    svg.appendChild(circle);
}

function updateCircle(x, y, id) {
    var circle = document.getElementById(id);
    circle.setAttribute("cx", x);
    circle.setAttribute("cy", y);
}

function drawLine(x1, y1, x2, y2, css, id) {
    var line = document.createElementNS("http://www.w3.org/2000/svg", "polyline");
    line.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2);
    line.setAttribute("class", css);
    line.setAttribute("id", id);
    svg.appendChild(line);
}

function updateLine(x1, y1, x2, y2, id) {
    var line = document.getElementById(id)
    line.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2);
}

/**
 * Point
 */
class Point {
    private x: number;
    private y: number;
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
} 

/**
 * SVGCPoint
 */
class SVGCPoint {
    private p1: Point;
    private p2: Point;
    private p3: Point;
    constructor(p1, p2, p3) {
        this.p1 = p1;
        this.p2 = p2;
        this.p3 = p3;
    }
}

/**
 * SVGMPoint
 */
class SVGMPoint {
    private p: Point;
    constructor(p) {
        this.p = p;
    }
}

/**
 * Circle
 */
class Circle {
    private p1: Point;
    private r: number;
    private css: string;
    private id: string;
    constructor(p, r, css, id) {
        this.p = p;
        this.r = r;
        this.css = css;
        this.id = id;
    }

    draw() {
        var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        circle.setAttribute("class", this.css);
        circle.setAttribute("cx", p1);
        circle.setAttribute("cy", this.p.y);
        circle.setAttribute("r", this.r);
        circle.setAttribute("pID", id);
        circle.setAttribute("id", id);
        svg.appendChild(circle);
    }
}

var p1 = new Point("1", "2");

var pppp = { p1: "John", p2: "Doe", p3: 50 };

//var U = document.getElementById("u");
//var I = document.getElementById("i");
var G = document.getElementById("g");
var debug = document.getElementById("debug");
//var strU = U.getAttributeNS(null, "d").trim();
//var strI = I.getAttributeNS(null, "d").trim();
var strG = G.getAttributeNS(null, "d").trim();
var str = strG;

var commands = str.split(/(?=[LMCZ])/);

var p = commands.map(function(c) {
    var points = c.slice(1, c.length).split(' ');
    points.shift();
    points.pop();

    var point = [];

    for (var i = 0; i < points.length; i++) {
        // if (points.length > 1) {
        var xy = points[i].split(',');
        point.push(xy);
        // }
    }
    debug.innerText += point + '\n';
    return point;
});
//debug.innerText += p + '\n';
p.shift();
p.pop();

//drawCircle(p[0][0][0], p[0][0][1], 2, "currentPoint", "cp-00");
drawCircle(190, 21, 3, "currentPoint", "cp-00");

for (var i = 0; i < p.length; i++) {
    drawCircle(p[i][0][0], p[i][0][1], 3, "controlPoint", "cp1-" + i);
    drawCircle(p[i][1][0], p[i][1][1], 3, "controlPoint", "cp2-" + i);
    drawCircle(p[i][2][0], p[i][2][1], 2, "currentPoint", "cp-" + i);

    //each control point has 1 control line
    if (i > 0) {
        drawLine(p[i - 1][2][0], p[i - 1][2][1], p[i][0][0], p[i][0][1], "controlLine", "cl1-" + i);
        //drawLine(p[i - 1][2][0], p[i - 1][2][1], p[i][1][0], p[i][1][1], "controlLine", "cl2-" + i);
    }
    //cp0 till last element
    if (i == 0) drawLine(p[i][0][0], p[i][0][1], p[p.length - 1][2][0], p[p.length - 1][2][1], "controlLine", "cl1-" + i);

    drawLine(p[i][1][0], p[i][1][1], p[i][2][0], p[i][2][1], "controlLine", "cl2-" + i);
}

var els = document.getElementsByClassName('currentPoint');

[].forEach.call(els, function(item) {
    //item.onmouseover = function(e) {item.style.display = "block"};
    //item.onmouseout = function(e) {item.style.display = 'none'};
    item.onmousedown = function(e) {
        document.onmousemove = function(e) {
            var pktX = item.getAttributeNS(null, "cx");
            var pktY = item.getAttributeNS(null, "cy");
            var newX = e.pageX;
            var newY = e.pageY;
            item.setAttributeNS(null, "cx", newX);
            item.setAttributeNS(null, "cy", newY);
            var s = pktX + "," + pktY;
            var news = newX + "," + newY;
            //debug.innerText += 'punkty:' + s + '\n';
            //debug.innerText += 'punktynowe:' + news + '\n';
            var pp = G.getAttributeNS(null, "d");
            var newd = pp.replace(s, newX + "," + newY);

            //control points
            var itemId = item.getAttributeNS(null, "pID");
            var numID = itemId.split('-')[1];
            var nn = parseInt(numID);
            //debug.innerText = nn;

            var cp1 = document.getElementById("cp1-" + nn);
            var cp1X = cp1.getAttributeNS(null, "cx");
            var cp1Y = cp1.getAttributeNS(null, "cy");
            //debug.innerText = 'punktynowe:';
            var newd1 = newd.replace(cp1X + "," + cp1Y, newX + "," + newY);
            //debug.innerText += newd;
            //debug.innerText += 'punkty:' + pktX + "," + pktY + '\n';
            G.setAttributeNS(null, "d", newd1);

            var next = nn;

            updateCircle(newX - cp1X, newY - cp1Y, "cp2-" + next)
            updateCircle(newX - cp1X, newY - cp1Y, "cp1-" + next)

            //check what id is to be udated
            var itemId = item.getAttributeNS(null, "pID");
            var numID = itemId.split('-')[1];
            var next = parseInt(numID) + 1;
            //debug.innerText = "idgnext: " + next;
            updateLine(newX - cp1X, newY - cp1Y, newX, newY, "cl1-" + next);
            // debug.innerText = "idg: " + next;
            // }
            //cp0 till last element
            //if (i == 0)  drawLine(p[i][0][0], p[i][0][1], p[p.length -1][2][0], p[p.length -1][2][1], "controlLine", "cl1-" + i);
            //each point has only one line
            updateLine(newX - cp1X, p[numID][1][1], newX, newY, "cl2-" + numID);
            //drawCircle(e.pageX, e.pageY, 5, "currentPoint");

            //       var cp1 = document.getElementById("cp1-" + 13);
            //       var cp1X = cp1.getAttributeNS(null, "cx");
            //       var cp1Y = cp1.getAttributeNS(null, "cy");

            //       var pp = G.getAttributeNS(null, "d");
            //       var newd = pp.replace(cp1X + "," + cp1Y, newX + "," + newY);
            //       var newd = pp.replace(cp1X + "," + cp1Y, newX + "," + newY);
            //       //debug.innerText += newd;
            //       //debug.innerText += 'punkty:' + pktX + "," + pktY + '\n';
            //       G.setAttributeNS(null, "d", newd);
            //       debug.innerText = "idg: " + newd;

        }
    }
})

document.onmouseup = function() {
    document.onmousemove = null;
};

// (function() {

// 	var container, svg, cType, code, point = {}, line = {}, fill = false, drag = null, dPoint, maxX, maxY;

// 	// define initial points
// 	function Init() {

// 		var c = svg.getElementsByTagName("circle");
// 		for (var i = 0; i < c.length; i++) {
// 			point[c[i].getAttributeNS(null,"id")] = {
// 				x: parseInt(c[i].getAttributeNS(null,"cx"),10),
// 				y: parseInt(c[i].getAttributeNS(null,"cy"),10)
// 			};
// 		}

// 		// lines
// 		line.l1 = svg.getElementById("l1");
// 		line.l2 = svg.getElementById("l2");
// 		line.curve = svg.getElementById("curve");

// 		// code
// 		code = document.getElementById("code");

// 		// event handlers
// 		svg.onmousedown = svg.onmousemove = svg.onmouseup = Drag;
// 		svg.ontouchstart = svg.ontouchmove = svg.ontouchend = Drag;

// 		DrawSVG();
// 	}

// 	// draw curve
// 	function DrawSVG() {

// 		// control line 1
// 		line.l1.setAttributeNS(null, "x1", point.p1.x);
// 		line.l1.setAttributeNS(null, "y1", point.p1.y);
// 		line.l1.setAttributeNS(null, "x2", point.c1.x);
// 		line.l1.setAttributeNS(null, "y2", point.c1.y);

// 		// control line 2
// 		var c2 = (point.c2 ? "c2" : "c1");
// 		line.l2.setAttributeNS(null, "x1", point.p2.x);
// 		line.l2.setAttributeNS(null, "y1", point.p2.y);
// 		line.l2.setAttributeNS(null, "x2", point[c2].x);
// 		line.l2.setAttributeNS(null, "y2", point[c2].y);

// 		// curve
// 		var d = 
// 			"M"+point.p1.x+","+point.p1.y+" "+cType+
// 			point.c1.x+","+point.c1.y+" "+
// 			(point.c2 ? point.c2.x+","+point.c2.y+" " : "")+
// 			point.p2.x+","+point.p2.y+
// 			(fill ? " Z" : "");
// 		line.curve.setAttributeNS(null, "d", d);

// 		// show code
// 		if (code) {
// 			code.textContent = '<path d="'+d+'" />';
// 		}
// 	}

// 	// drag event handler
// 	function Drag(e) {

// 		e.stopPropagation();
// 		var t = e.target, id = t.id, et = e.type, m = MousePos(e);

// 		// toggle fill class
// 		if (!drag && et == "mousedown" && id == "curve") {
// 			fill = !fill;
// 			t.setAttributeNS(null, "class", (fill ? "fill" : ""));
// 			DrawSVG();
// 		}

// 		// start drag
// 		if (!drag && typeof(point[id]) != "undefined" && (et == "mousedown" || et == "touchstart")) {
// 			drag = t;
// 			dPoint = m;
// 		}

// 		// drag
// 		if (drag && (et == "mousemove" || et == "touchmove")) {
// 			id = drag.id;
// 			point[id].x += m.x - dPoint.x;
// 			point[id].y += m.y - dPoint.y;
// 			dPoint = m;
// 			drag.setAttributeNS(null, "cx", point[id].x);
// 			drag.setAttributeNS(null, "cy", point[id].y);
// 			DrawSVG();
// 		}

// 		// stop drag
// 		if (drag && (et == "mouseup" || et == "touchend")) {
// 			drag = null;
// 		}

// 	}

// 	// mouse position
// 	function MousePos(event) {
// 		return {
// 			x: Math.max(0, Math.min(maxX, event.pageX)),
// 			y: Math.max(0, Math.min(maxY, event.pageY))
// 		}
// 	}

// 	// start
// 	window.onload = function() {
// 		container = document.getElementById("svg");
// 		if (container) {
// 			cType = container.className;
// 			maxX = container.offsetWidth-1;
// 			maxY = container.offsetHeight-1;
// 			svg = container.contentDocument;
// 			Init();
// 		}
// 	}

// })();